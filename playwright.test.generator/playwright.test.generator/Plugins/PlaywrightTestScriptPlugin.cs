using System.ComponentModel;
using System.Net.Http;
using System.Security.Cryptography.X509Certificates;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.SemanticKernel;
using playwright.test.generator.Services;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace playwright.test.generator.Plugins;


public class PlaywrightTestScriptPlugin
{
    public PlaywrightTestScriptPlugin(ICommandRunnerService commandRunnerService, ILogger<PlaywrightTestScriptPlugin> logger)
    {
        _commandRunnerService = commandRunnerService;
        _logger = logger;
    }
    public const string KernelFunctionName="evaluate_playwright_test_script";
    private readonly ICommandRunnerService _commandRunnerService;
    private readonly ILogger<PlaywrightTestScriptPlugin> _logger;

    [KernelFunction(KernelFunctionName)]
    [Description("Returns the output of the provided playwright test script generated by the assistant. Assistant MUST call this function only after all scenario steps have been executed. If the script runs without errors and all test pass, assistant must reply with these exact words 'TEST OK'. If the script has still errors after the assistant has tried to fox it up to the maximum amount of time, , assistant must start the reply with these exact words 'TEST KO' and then explain his reasoning about why he was unable to generate a script without errors and with all test passing")]
    public async Task<string> EvaluatePlaywrightTestScript(
        [Description("the assistant generated playwright test script")] string playWrightScript)
    {
        try {
            _logger.LogInformation($"Executing Playwright test script: {playWrightScript}");

            var fileName = Path.GetFileName( Path.ChangeExtension(Path.GetTempFileName(), "spec.ts"));
            var fp = Path.GetFullPath(Path.Combine(Directory.GetCurrentDirectory(), fileName));
            await File.WriteAllTextAsync(fp, playWrightScript);
            var ret = await _commandRunnerService.RunCommand($"npx.cmd playwright test {fileName} --reporter=list --output=./test-results");
            var stdErrorString = "";
            if(!string.IsNullOrWhiteSpace(ret.stdError))
            {
                stdErrorString = $"StandardError: {ret.stdError}";   
            }
            if(ret.ExitCode!= 0)
            {
                var errorFiles = Directory.GetFiles("./test-results", "error-context.md", SearchOption.AllDirectories);
                if (errorFiles.Length > 0)
                {
                    var errorContent = await File.ReadAllTextAsync(errorFiles[0]);
                    _logger.LogWarning($"Error context: {errorContent}");    
                    return $"TEST KO. Playwright test script execution failed with exit code {ret.ExitCode}. StandardOutput: {ret.stdOut} {stdErrorString} Error context: {errorContent}";
                }
            }   
            return $"exit code {ret.ExitCode} StandardOutput: {ret.stdOut}";

        }
        catch   (Exception ex)
        {
            _logger.LogError(ex, $"A general error has occurred while executing the Playwright test script. {ex}");  
            return $"A general error has occurred while executing the Playwright test script: {ex.ToString()}";
        }   
    }

  

}
